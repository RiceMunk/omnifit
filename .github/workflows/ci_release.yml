# GitHub Actions workflow for Release creation
# Also runs tests on the release (identical to ci_tests.yml) before
# generating a draft release. Additionally uploads to test PyPi, to make
# sure nothing is wrong on that end.
# Once this draft release has been made into a non-draft, ci_publish.yaml
# will run to publish the release to PyPi proper, in a manner similar 
# to ci_test_publish.yaml

name: CI Release

on:
  push:
    branches:
    - master
    tags:
    - v[0-9]+.[0-9]+.[0-9]+ # Non-dev semantic version tags

jobs:
  # Github Actions supports ubuntu, windows, and macos virtual environments:
  # https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners
  ci_tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Code style checks
            os: ubuntu-latest
            python: 3.x
            toxenv: codestyle

          - name: Python 3.7 with minimal dependencies
            os: ubuntu-latest
            python: 3.7
            toxenv: py37-test

          - name: Python 3.8 with all optional dependencies and coverage checking
            os: ubuntu-latest
            python: 3.8
            toxenv: py38-test-alldeps-cov

          - name: macOS - Python 3.8 with all optional dependencies
            os: macos-latest
            python: 3.8
            toxenv: py38-test-alldeps

          - name: Windows - Python 3.8 with all optional dependencies
            os: windows-latest
            python: 3.8
            toxenv: py38-test-alldeps

          # - name: Python 3.7 with oldest supported version of all dependencies
          #   os: ubuntu-16.04
          #   python: 3.7
          #   toxenv: py37-test-oldestdeps

          # - name: Python 3.8 with latest dev versions of key dependencies
          #   os: ubuntu-latest
          #   python: 3.8
          #   toxenv: py38-test-devdeps

          # - name: Test building of Sphinx docs
          #   os: ubuntu-latest
          #   python: 3.x
          #   toxenv: build_docs

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up python ${{ matrix.python }} on ${{ matrix.os }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Install base dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox codecov
    - name: Test with tox
      run: |
        tox -e ${{ matrix.toxenv }}
    # This is an example of how to upload coverage to codecov
    # - name: Upload coverage to codecov
    #   if: "contains(matrix.toxenv, '-cov')"
    #   uses: codecov/codecov-action@v2
    #   with:
    #     file: ./coverage.xml
  publish_test:
    # Publish to test PyPi
    name: Build and publish to TestPyPI
    runs-on: ubuntu-18.04
    needs: ci_tests
    steps:
    - uses: actions/checkout@master
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install pypa/build
      run: >-
        python -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: >-
        python -m
        build
        --sdist
        --wheel
        --outdir dist/
        .
    - name: Publish distribution ðŸ“¦ to Test PyPI
      if: startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI }}
        repository_url: https://test.pypi.org/legacy/
        skip_existing: true
  release:
    name: Create Release Draft
    runs-on: ubuntu-latest
    needs: publish_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: startsWith(github.ref, 'refs/tags')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes in ${GITHUB_REF##*/}
            - First Change
            - Second Change
          draft: true
          prerelease: false
